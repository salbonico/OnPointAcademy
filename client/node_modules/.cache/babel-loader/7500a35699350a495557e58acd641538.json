{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n}; // Short ID Generation in JavaScript\n// http://fiznool.com/blog/2014/11/16/short-id-generation-in-javascript/\n\n/**\n * The default alphabet is 25 numbers and lowercase letters.\n * Any numbers that look like letters and vice versa are removed:\n * 1 l, 0 o.\n * Also the following letters are not present, to prevent any\n * expletives: cfhistu\n */\n\n\nvar DEFAULT_ALPHABET = '23456789abdegjkmnpqrvwxyz'; // Governs the length of the ID.\n// With an alphabet of 25 chars,\n// a length of 8 gives us 25^8 or\n// 152,587,890,625 possibilities.\n// Should be enough...\n\nvar DEFAULT_ID_LENGTH = 5;\n/**\n * Governs the number of times we should try to find\n * a unique value before giving up.\n * @type {Number}\n */\n\nvar UNIQUE_RETRIES = 9999;\n/**\n * Returns a randomly-generated friendly ID.\n * Note that the friendly ID is not guaranteed to be\n * unique to any other ID generated by this same method,\n * so it is up to you to check for uniqueness.\n * @return {String} friendly ID.\n */\n\nvar generate = exports.generate = function generate(options) {\n  var _options = _extends({}, options),\n      _options$alphabet = _options.alphabet,\n      alphabet = _options$alphabet === undefined ? DEFAULT_ALPHABET : _options$alphabet,\n      _options$idLength = _options.idLength,\n      idLength = _options$idLength === undefined ? DEFAULT_ID_LENGTH : _options$idLength;\n\n  var rtn = '';\n\n  for (var i = 0; i < idLength; i++) {\n    rtn += alphabet.charAt(Math.floor(Math.random() * alphabet.length));\n  }\n\n  return rtn;\n};\n/**\n * Tries to generate a unique ID that is not defined in the\n * `previous` array.\n * @param  {Array} previous The list of previous ids to avoid.\n * @return {String} A unique ID, or `null` if one could not be generated.\n */\n\n\nvar generateUnique = exports.generateUnique = function generateUnique(previous) {\n  previous = previous || [];\n  var retries = 0;\n  var id = void 0; // Try to generate a unique ID,\n  // i.e. one that isn't in the previous.\n\n  while (!id && retries < UNIQUE_RETRIES) {\n    id = generate();\n\n    if (previous.indexOf(id) !== -1) {\n      id = null;\n      retries++;\n    }\n  }\n\n  return id;\n};","map":null,"metadata":{},"sourceType":"script"}